{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/direction-reveal.js","scripts/main.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\n/** \n  Direction aware content reveals.\n\n  @param {Object} Options object.\n  @param {string} selector Container element selector.\n  @param {string} itemSelector Item element selector.\n  @param {string} animationName Animation CSS class.\n*/\n\nconst DirectionReveal = function({\n  selector: selector = '.direction-reveal',\n  itemSelector: itemSelector = '.direction-reveal__card',\n  animationName: animationName = 'swing'\n} = {}) {\n\n  const containers = document.querySelectorAll(selector);\n  \n\n  const _getDirection = function (e, item) {\n    // Width and height of current item\n    let w = item.offsetWidth;\n    let h = item.offsetHeight;\n\n    // Calculate the x/y value of the pointer entering/exiting, relative to the center of the item.\n    let x = (e.pageX - item.offsetLeft - (w / 2) * (w > h ? (h / w) : 1));\n    let y = (e.pageY - item.offsetTop - (h / 2) * (h > w ? (w / h) : 1));\n\n    // Calculate the angle the pointer entered/exited and convert to clockwise format (top/right/bottom/left = 0/1/2/3).  See https://stackoverflow.com/a/3647634 for a full explanation.\n    let d = Math.round(Math.atan2(y, x) / 1.57079633 + 5) % 4;\n  \n    return d;\n  };\n  \n  const _translateDirection = switchcase({\n    0: 'top',\n    1: 'right',\n    2: 'bottom',\n    3: 'left'\n  })('top');\n  \n\n  const _addClass = function (e, state) {\n    let currentItem = e.currentTarget;\n    let direction = _getDirection(e, currentItem);\n    let directionString = _translateDirection(direction);\n\n    // Remove current animation classes and add current one.\n    let currentCssClasses = currentItem.className.split(' ');\n    let filteredCssClasses = currentCssClasses.filter((cssClass) => (!cssClass.startsWith(animationName))).join(' ');\n    currentItem.className = filteredCssClasses;\n    currentItem.classList.add(`${animationName}--${state}-${directionString}`);\n  };\n\n  \n  const _bindEvents = function (containerItem) {\n    const items = containerItem.querySelectorAll(itemSelector);\n    \n    items.forEach((item) => {\n                        \n      item.addEventListener('mouseenter', function (e) {\n        _addClass(e, 'in');\n      });\n    \n      item.addEventListener('mouseleave', function (e) {\n        _addClass(e, 'out');\n      });\n\n    });\n  };\n\n\n  const init = function () {\n\n    if (containers.length) {\n      containers.forEach((containerItem) => {\n        _bindEvents(containerItem);\n      });\n    }\n    else {\n      return;\n    }\n\n  };\n\n  // Init is called by default\n  init();\n\n\n  // Reveal API\n  return {\n    init\n  };\n};\n\nexport default DirectionReveal;\n\n\n// Better switch cases - https://hackernoon.com/rethinking-javascript-eliminate-the-switch-statement-for-better-code-5c81c044716d\nexport const switchcase = cases => defaultCase => key =>\nkey in cases ? cases[key] : defaultCase;\n","import DirectionReveal from './direction-reveal.js';\n\n// Swing animation(Default)\nconst directionReveal = DirectionReveal({\n  selector: '.direction-reveal--demo-swing'\n});\n\n// Swipe animation \nconst directionRevealSlide = DirectionReveal({\n  selector: '.direction-reveal--demo-slide',\n  itemSelector: '.direction-reveal__card',\n  animationName: 'slide'\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}